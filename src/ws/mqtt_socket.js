import mqtt from 'mqtt';

class MqttConnector {
    
    constructor(url, topic) {
        console.log(`constructor have props: '${url}/${topic}'`)
        this.url = url;
        this.topic = topic
        this.socket = null //–æ–±–Ω—É–ª—è–µ–º —Å–æ–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç—ã –∫ —Ö–æ—Å—Ç—É
        this.options = {
            // Clean session
            clean: true,
            connectTimeout: 3000,
            // reconnectPeriod: 611,
            // Authentication
            // clientId: 'emqx_test',
            // username: 'emqx_test',
            // password: 'emqx_test',
          }
    }

    init(newUrl, newTopic) {
        this.url=newUrl;
        this.topic=newTopic;
        this.socket = null //–æ–±–Ω—É–ª—è–µ–º —Å–æ–∫–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç—ã –∫ —Ö–æ—Å—Ç—É
        console.log(`init changed params: '${this.url}' / '${this.topic}'`)
    }

    sniff() {//—Ç–µ—Å—Ç–æ–≤–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—é –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ^
        // this.subscribe();
        console.log(`üîé Sniffing starting...`)
        const socket = this._connect();
        socket.on("message", function (topic, received) {
        console.log(`üì® Received in sniffer: \n MSG: ${received} \n URL: ${socket.options.href} \n TOPIC: ${topic}`);//socket.options.href —Ç.–∫. –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤–Ω–µ—â–Ω–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –ø–æ —Ç–∏–ø—É url/this.url...
        })
        return this.socket.connected
    }

    _connect(){
        if(!this.socket) { 
            
            console.log(`${!this.socket ? 'Session is null' : 'Session stable'}. Connecting ${this.url}...`);
            this.socket = mqtt.connect(this.url, this.options); //–∑–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∫–µ—Ç–∞
            this.socket.on("end", () => {
                console.log(`Disconnected from ${this.url} ${!this.socket ? 'Session now is null' : 'Session was stable'}`)
            });
            this.socket.on("connect", () => {
                console.log(`‚úÖ Connected to ${this.url}`);
            this.socket.subscribe(this.topic, { qos: 0 }, (err) => {
                err ? console.log(err) : console.log(`‚úÖ Subscribed to ${this.topic}`)
                });
            })
            this.socket.on("reconnect", () => {
                console.log(`RECONNECTING ... ... ...\n${!this.socket ? 'Session is null' : 'Session stable'}`);
            });
            // this.socket.end();//–ø–æ—Ç–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥—É–º–∞—é –∫–∞–∫ –≤—ã–∑—ã–≤–∞—Ç—å —Å–æ–∫–µ—Ç —ç–Ω–¥, –∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç disconnect(); –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞—é –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤ useEffect, –≤ MainControlBoard
        }  return this.socket
    }

    disconnect() {
        // const socket = this._connect();
        console.log(`${!this.socket ? 'Session is null' : 'Session now stable'} ‚õî Disconnection...`) //–ü–∏—à–µ–º —á—Ç–æ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        const socket = this._connect();
        socket.end();
        this.socket.on("close", (err) => {
            err ? console.log(err) : console.log('Closing connection ')
            });
        this.socket = null //–æ–±–Ω—É–ª—è–µ–º —Å–æ–∫–µ—Ç —Ç.–∫. –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏

    }

    publishMessage(message) {
        const socket = this._connect();

        console.log(`üñÜ Trying to publish: ${message} 
        to topic: ${this.topic} on URL: ${this.socket.options.href}. 
        ${!this.socket ? 'Session is null' : 'Session stable'}`) //–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

        socket.publish(this.topic, message, { qos: 0, retain: false }, function (err) {
            err ? console.log(err) : console.log('üñÖ Success!')
        });
    }
}
export const connector = new MqttConnector('mqtt://localhost:9001/mqtt', 'glamp');